import fs from 'fs/promises';
import path from 'path';
import { transform } from '@babel/core';
import logger from '../utils/logger.js';

/**
 * BackgroundJSTransformer - –§–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è .tsx —Ñ–∞–π–ª–æ–≤ –≤ .js
 * –†–∞–±–æ—Ç–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ —Ñ–æ–Ω–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
 */
class BackgroundJSTransformer {
  constructor() {
    this.outputDir = './output';
    this.isProcessing = false;
    this.queue = [];
    this.hasStarted = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
  }

  /**
   * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è TypeScript/JSX –∫–æ–¥–∞ –≤ JavaScript
   */
  async transformToJavaScript(tsxCode, componentName) {
    try {
      const result = transform(tsxCode, {
        presets: [
          ['@babel/preset-typescript', { isTSX: true, allExtensions: true }],
          ['@babel/preset-react', { runtime: 'classic' }]
        ],
        filename: `${componentName}.tsx`
      });

      if (!result || !result.code) {
        throw new Error('–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ Babel');
      }

      // –û—á–∏—â–∞–µ–º –∫–æ–¥ –æ—Ç import/export –∏ TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
      const cleanCode = result.code
        .replace(/import\s+.*?from\s+['"][^'"]+['"];?\s*/g, '') // –£–¥–∞–ª—è–µ–º –≤—Å–µ import statements
        .replace(/import\s+['"][^'"]+['"];?\s*/g, '') // –£–¥–∞–ª—è–µ–º import –±–µ–∑ from
        .replace(/export\s+.*?from\s+['"][^'"]+['"];?\s*/g, '') // –£–¥–∞–ª—è–µ–º export statements
        .replace(/export\s+default\s+[^;]+;\s*/g, '') // –£–¥–∞–ª—è–µ–º export default
        .replace(/interface\s+\w+\s*\{[^}]*\}\s*/g, '') // –£–¥–∞–ª—è–µ–º TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        .replace(/type\s+\w+\s*=\s*[^;]+;\s*/g, '') // –£–¥–∞–ª—è–µ–º TypeScript —Ç–∏–ø—ã
        .replace(/:\s*React\.FC<[^>]+>/g, '') // –£–¥–∞–ª—è–µ–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é React.FC<Props>
        .replace(/:\s*\w+Props/g, '') // –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ Props –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        .replace(/className={\`([^`]+)\${([^}]+)}\`}/g, 'className={"$1" + $2}')
        .replace(/className={\`([^`]+)\`}/g, 'className={"$1"}')
        .replace(/\/\/ React —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω\s*/g, '') // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        .trim(); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

      return cleanCode;
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${componentName}:`, error);
      throw error;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ .tsx —Ñ–∞–π–ª–∞ –≤ .js
   */
  async transformFile(tsxPath, jsPath) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ .js —Ñ–∞–π–ª
      try {
        await fs.access(jsPath);
        logger.debug(`JavaScript —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${jsPath}`);
        return { success: true, skipped: true, path: jsPath };
      } catch {
        // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }

      // –ß–∏—Ç–∞–µ–º TypeScript —Ñ–∞–π–ª
      const tsxCode = await fs.readFile(tsxPath, 'utf8');
      
      // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤ JavaScript
      const jsCode = await this.transformToJavaScript(tsxCode, path.basename(tsxPath, '.tsx'));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º JavaScript —Ñ–∞–π–ª
      await fs.writeFile(jsPath, jsCode, 'utf8');
      
      logger.info(`‚úÖ JavaScript —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${jsPath}`);
      return { success: true, skipped: false, path: jsPath };
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${tsxPath}:`, error);
      return { success: false, error: error.message, path: tsxPath };
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
   */
  addToQueue(task) {
    this.queue.push(task);
    logger.debug(`üìã –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: ${task.tsxPath}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
    if (!this.isProcessing) {
      this.processQueue();
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
   */
  async processQueue() {
    if (this.isProcessing || this.queue.length === 0) {
      return;
    }

    this.isProcessing = true;
    logger.info(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏: ${this.queue.length} –∑–∞–¥–∞—á`);

    while (this.queue.length > 0) {
      const task = this.queue.shift();
      
      try {
        const result = await this.transformFile(task.tsxPath, task.jsPath);
        
        if (result.success) {
          logger.debug(`‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${task.tsxPath}`);
        } else {
          logger.error(`‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${task.tsxPath} - ${result.error}`);
        }
      } catch (error) {
        logger.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ ${task.tsxPath}:`, error);
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    this.isProcessing = false;
    logger.info(`üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö .tsx —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
   */
  async transformDirectoryAsync(dirPath) {
    try {
      const files = await fs.readdir(dirPath);
      const tsxFiles = files.filter(file => file.endsWith('.tsx'));
      
      if (tsxFiles.length === 0) {
        logger.debug(`üìÅ –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath} –Ω–µ—Ç .tsx —Ñ–∞–π–ª–æ–≤`);
        return 0;
      }

      let addedToQueue = 0;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π .tsx —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Ç–æ–ª—å–∫–æ —Ç–µ, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç .js
      for (const tsxFile of tsxFiles) {
        const tsxPath = path.join(dirPath, tsxFile);
        const jsPath = path.join(dirPath, tsxFile.replace('.tsx', '.js'));
        
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ .js —Ñ–∞–π–ª
          await fs.access(jsPath);
          logger.debug(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${tsxFile} - .js —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        } catch {
          // .js —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
          this.addToQueue({ tsxPath, jsPath });
          addedToQueue++;
        }
      }

      if (addedToQueue > 0) {
        logger.info(`üìã –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedToQueue} –∏–∑ ${tsxFiles.length} .tsx —Ñ–∞–π–ª–æ–≤ –∏–∑ ${dirPath} –≤ –æ—á–µ—Ä–µ–¥—å`);
      } else {
        logger.debug(`üìÅ –í—Å–µ .tsx —Ñ–∞–π–ª—ã –≤ ${dirPath} —É–∂–µ –∏–º–µ—é—Ç .js –≤–µ—Ä—Å–∏–∏`);
      }

      return addedToQueue;
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath}:`, error);
      return 0;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ output/ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
   */
  async transformAllComponentsAsync() {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    if (this.hasStarted) {
      logger.debug('üîÑ –§–æ–Ω–æ–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return 0;
    }

    this.hasStarted = true;

    try {
      logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ output/
      const outputDirs = await fs.readdir(this.outputDir);
      let totalTasks = 0;

      for (const dir of outputDirs) {
        const dirPath = path.join(this.outputDir, dir);
        
        try {
          const stat = await fs.stat(dirPath);
          if (stat.isDirectory()) {
            const taskCount = await this.transformDirectoryAsync(dirPath);
            totalTasks += taskCount;
          }
        } catch (error) {
          logger.debug(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${dir} (–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞)`);
        }
      }

      if (totalTasks > 0) {
        logger.info(`üìã –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${totalTasks} –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å`);
      } else {
        logger.info(`üìÅ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–∂–µ –∏–º–µ—é—Ç .js –≤–µ—Ä—Å–∏–∏, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
      }
      return totalTasks;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è output/:', error);
      this.hasStarted = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return 0;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
   */
  async transformTaskComponentsAsync(taskId) {
    try {
      const taskDir = path.join(this.outputDir, taskId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      await fs.access(taskDir);
      
      logger.info(`üìã –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–¥–∞—á–∏ ${taskId} –≤ –æ—á–µ—Ä–µ–¥—å`);
      const taskCount = await this.transformDirectoryAsync(taskDir);
      
      return taskCount;
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á–∏ ${taskId}:`, error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ—Ä–∫–µ—Ä–∞
   */
  getStatus() {
    return {
      isProcessing: this.isProcessing,
      queueLength: this.queue.length,
      hasStarted: this.hasStarted,
      status: this.hasStarted ? 
        (this.queue.length === 0 && !this.isProcessing ? 'completed' : 'in_progress') : 
        'not_started'
    };
  }
}

export default BackgroundJSTransformer;
