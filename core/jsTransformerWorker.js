import fs from 'fs/promises';
import path from 'path';
import { transform } from '@babel/core';
import logger from '../utils/logger.js';

/**
 * JSTransformerWorker - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ .tsx —Ñ–∞–π–ª—ã –≤ .js —Ñ–∞–π–ª—ã
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
 */
class JSTransformerWorker {
  constructor() {
    this.outputDir = './output';
  }

  /**
   * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è TypeScript/JSX –∫–æ–¥–∞ –≤ JavaScript
   */
  async transformToJavaScript(tsxCode, componentName) {
    try {
      const result = transform(tsxCode, {
        presets: [
          ['@babel/preset-typescript', { isTSX: true, allExtensions: true }],
          ['@babel/preset-react', { runtime: 'automatic' }]
        ],
        filename: `${componentName}.tsx`
      });

      if (!result || !result.code) {
        throw new Error('–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ Babel');
      }

      // –û—á–∏—â–∞–µ–º –∫–æ–¥ –æ—Ç import/export –∏ TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
      const cleanCode = result.code
        .replace(/import React from 'react';/g, '// React —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω')
        .replace(/export default [^;]+;/g, '')
        .replace(/interface\s+\w+\s*\{[^}]*\}/g, '') // –£–¥–∞–ª—è–µ–º TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        .replace(/type\s+\w+\s*=\s*[^;]+;/g, '') // –£–¥–∞–ª—è–µ–º TypeScript —Ç–∏–ø—ã
        .replace(/:\s*React\.FC<[^>]+>/g, '') // –£–¥–∞–ª—è–µ–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é React.FC<Props>
        .replace(/:\s*\w+Props/g, '') // –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ Props –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        .replace(/className={\`([^`]+)\${([^}]+)}\`}/g, 'className={"$1" + $2}')
        .replace(/className={\`([^`]+)\`}/g, 'className={"$1"}');

      logger.info(`üîÑ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${componentName} —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –≤ JavaScript`);
      return cleanCode;
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${componentName}:`, error);
      throw error;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ .tsx —Ñ–∞–π–ª–∞ –≤ .js
   */
  async transformFile(tsxPath, jsPath) {
    try {
      // –ß–∏—Ç–∞–µ–º TypeScript —Ñ–∞–π–ª
      const tsxCode = await fs.readFile(tsxPath, 'utf8');
      
      // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤ JavaScript
      const jsCode = await this.transformToJavaScript(tsxCode, path.basename(tsxPath, '.tsx'));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º JavaScript —Ñ–∞–π–ª
      await fs.writeFile(jsPath, jsCode, 'utf8');
      
      logger.info(`‚úÖ –§–∞–π–ª –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω: ${tsxPath} ‚Üí ${jsPath}`);
      return jsPath;
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${tsxPath}:`, error);
      throw error;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö .tsx —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  async transformDirectory(dirPath) {
    try {
      const files = await fs.readdir(dirPath);
      const tsxFiles = files.filter(file => file.endsWith('.tsx'));
      
      if (tsxFiles.length === 0) {
        logger.info(`üìÅ –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath} –Ω–µ—Ç .tsx —Ñ–∞–π–ª–æ–≤`);
        return [];
      }

      logger.info(`üîÑ –ù–∞–π–¥–µ–Ω–æ ${tsxFiles.length} .tsx —Ñ–∞–π–ª–æ–≤ –≤ ${dirPath}`);

      const results = [];
      for (const tsxFile of tsxFiles) {
        const tsxPath = path.join(dirPath, tsxFile);
        const jsPath = path.join(dirPath, tsxFile.replace('.tsx', '.js'));
        
        try {
          await this.transformFile(tsxPath, jsPath);
          results.push({ tsxFile, jsPath, success: true });
        } catch (error) {
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ${tsxFile}:`, error.message);
          results.push({ tsxFile, jsPath, success: false, error: error.message });
        }
      }

      const successCount = results.filter(r => r.success).length;
      logger.info(`‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ ${successCount}/${tsxFiles.length} —Ñ–∞–π–ª–æ–≤ –≤ ${dirPath}`);
      
      return results;
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath}:`, error);
      throw error;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ output/
   */
  async transformAllComponents() {
    try {
      logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ output/
      const outputDirs = await fs.readdir(this.outputDir);
      const componentDirs = outputDirs.filter(dir => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (–Ω–µ —Ñ–∞–π–ª)
        return fs.stat(path.join(this.outputDir, dir)).then(stat => stat.isDirectory()).catch(() => false);
      });

      if (componentDirs.length === 0) {
        logger.info('üìÅ –í output/ –Ω–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏');
        return [];
      }

      logger.info(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${componentDirs.length} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏`);

      const allResults = [];
      for (const dir of componentDirs) {
        const dirPath = path.join(this.outputDir, dir);
        try {
          const results = await this.transformDirectory(dirPath);
          allResults.push({ directory: dir, results });
        } catch (error) {
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}:`, error.message);
          allResults.push({ directory: dir, results: [], error: error.message });
        }
      }

      const totalSuccess = allResults.reduce((sum, dir) => 
        sum + dir.results.filter(r => r.success).length, 0
      );
      const totalFiles = allResults.reduce((sum, dir) => 
        sum + dir.results.length, 0
      );

      logger.info(`üéâ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${totalSuccess}/${totalFiles} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã`);
      
      return allResults;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
   */
  async transformTaskComponents(taskId) {
    try {
      const taskDir = path.join(this.outputDir, taskId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      await fs.access(taskDir);
      
      logger.info(`üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}`);
      const results = await this.transformDirectory(taskDir);
      
      return results;
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}:`, error);
      throw error;
    }
  }
}

export default JSTransformerWorker;
